import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id "com.android.library"
    id "maven-publish"
}

group = "com.github.tioi-network"

android {
    compileSdkVersion 30
    buildToolsVersion "26.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable = true
            jniDebuggable = true
        }
    }

    sourceSets {
        main {
            jniLibs.srcDir 'src/main/libs'
            jni.srcDirs = []
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation 'androidx.annotation:annotation:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    implementation 'androidx.appcompat:appcompat:1.3.0'
}

def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null)
        return System.env.ANDROID_NDK_ROOT

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null)
        throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")

    return ndkdir
}

def getNdkBuildCmd() {
    def ndkbuild = getNdkDir() + "/ndk-build"
    if (Os.isFamily(Os.FAMILY_WINDOWS))
        ndkbuild += ".cmd"

    return ndkbuild
}

task ndkBuild(type: Exec, description: "Compile JNI Sources") {
    workingDir file('src/main')
    commandLine getNdkBuildCmd()
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkLibsToJar
}

task ndkLibsToJar(type: Zip, dependsOn: 'ndkBuild', description: 'Create a JAR of the native libs') {
    destinationDir new File(buildDir, 'libs')
    baseName 'ndk-libs'
    extension 'jar'
    from(new File(buildDir, 'libs')) { include '**/*.so' }
    into 'lib/'
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId rootProject.ext.pomGroupID
            artifactId project.name
            version rootProject.ext.pomVersion

            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/${project.name}-release.aar")

            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // invalid dependencies should be ignored

                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('artifactId', dep.name)
                    if (dep.version == 'unspecified') {
                        dependencyNode.appendNode('groupId', rootProject.ext.pomGroupID)
                        dependencyNode.appendNode('version', rootProject.ext.pomVersion)
                    } else {
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('version', dep.version)
                    }

                    configurations.api.getDependencies().each { apiDep -> addDependency(apiDep, "compile") }
                    configurations.implementation.getDependencies().each { impDep -> addDependency(impDep, "runtime") }

                    dependencyNode.appendNode('scope', scope)
                }
            }
        }
    }
}

